import typing as T

import matplotlib.pyplot as plt
import numpy as np

from tipeval.core.tips import ThreeSidedPyramidTip
from tipeval.core.utils.nanoindentation import contact_radius_sphere
from tipeval.core.plots.base_plot import BasePlot


class ContactRadiusFitPlot(BasePlot):
    """
    This class is a plot of the fitted contact radius.

    The contact radius can be fitted in order to determine the radius of the tip as well as the
    (equivalent) cone angle.
    """
    def __init__(self, tip: ThreeSidedPyramidTip) -> T.NoReturn:
        """
        :param tip: any tip object generated by fitting a data set
        """

        super().__init__()

        self._ax = self._fig.add_subplot()
        self._tip = tip

    def plot_contact_radius(self, color: T.Union[str, T.Tuple[float, ...]] = 'k', marker: str = '*', **fmt) -> T.NoReturn:
        """

        :param color:
        :param marker:
        :param fmt: any formatting that will be applied to plot
        :return: NoReturn
        """
        self._ax.plot(self._tip.contact_radius, self._tip.contact_depths, color=color, marker=marker, **fmt)
        self._ax.set_ylabel(f'contact depth ({self._tip.unit})')
        self._ax.set_xlabel(f'contact radius ({self._tip.unit})')

    def plot_fit_sphere(self, radius: float, format: str = 'r--', **fmt) -> T.NoReturn:
        """
        Plot the circular fit for the determination of the radius

        :param radius: the radius of the fit to plot
        :param format: a format specifier for the plot. Typically the third argument to plt.plot
        :param fmt: any formatting that will be applied to plot
        :return: NoReturn
        """
        x = np.linspace(0, radius, 100)
        y = contact_radius_sphere(x, radius)
        self._ax.plot(radius-x, radius-y, format, label='fit radius', **fmt)

    def plot_fit_contact_angle(self, angle: float, intercept: float, limit: float = 0, format: str = 'b-.',
                               **fmt) -> T.NoReturn:
        """
        Plot the linear fit for the determination of the contact angle

        :param angle: the equivalent cone angle
        :param intercept: the intercept as determined by the fit
        :param limit: the lower limit up to which the fit is plotted
        :param format: a format specifier for the plot. Typically the third argument to plt.plot
        :param fmt: any formatting that will be applied to plot
        :return: NoReturn
        """

        x = np.linspace(limit, self._tip.contact_radius.max(), 2)
        y = (x-intercept)/np.tan(np.deg2rad(angle))
        self._ax.plot(x, y, format, label='fit cone angle', **fmt)

    @property
    def ax(self) -> plt.Axes:
        """The axis object containing the plot"""
        return self._ax

    @property
    def figure(self) -> plt.Figure:
        """The figure object containing the figure"""
        return self._fig

    def show(self, legend: bool = True, aspect_equal: bool = False) -> T.NoReturn:
        """
        Call plt.show with some options

        :param legend: if True the legend will be plotted
        :param aspect_equal: if True the aspect ratio of the plot will be set to 'equal'
        :return: NoReturn
        """
        if aspect_equal:
            self._ax.set_aspect('equal')
        if legend:
            self._ax.legend()
        plt.show()
